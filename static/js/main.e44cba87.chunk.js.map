{"version":3,"sources":["p2-homeworks/h2/Affairs.module.css","p2-homeworks/h1/Message.module.css","p2-homeworks/h2/Affair.module.css","p1-main/m1-ui/u1-app/App.module.css","p2-homeworks/h1/Message.tsx","p2-homeworks/h1/HW1.tsx","p2-homeworks/h2/Affair.tsx","p2-homeworks/h2/Affairs.tsx","p2-homeworks/h2/HW2.tsx","p1-main/m1-ui/u1-app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Message","props","className","message","wrapper","src","avatar","alt","name","time","messageData","HW1","Affair","colors","af","level","affair","priority","global","onClick","deleteAffairCallback","_id","Affairs","useState","cls","setCls","mappedAffairs","data","map","a","st1","fs","buttons","active","st2","st3","st4","someClass","tasks","setFilter","defaultAffairs","HW2","affairs","setAffairs","filter","filteredAffairs","filterAffairs","d","deleteAffair","App","s","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"6EACAA,EAAOC,QAAU,CAAC,UAAY,2BAA2B,MAAQ,uBAAuB,QAAU,yBAAyB,OAAS,0B,iBCApID,EAAOC,QAAU,CAAC,QAAU,yBAAyB,QAAU,yBAAyB,KAAO,sBAAsB,KAAO,wB,gBCA5HD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,OAAS,uBAAuB,IAAM,oBAAoB,KAAO,qBAAqB,OAAS,uBAAuB,MAAQ,wB,kBCAhLD,EAAOC,QAAU,CAAC,IAAM,mB,8ICwBTC,MAff,SAAiBC,GACb,OACI,8BACI,sBAAKC,UAAWC,IAAQC,QAAxB,UACI,qBAAKC,IAAKJ,EAAMK,OAAQC,IAAI,KAC5B,sBAAKL,UAAWC,IAAQA,QAAxB,UACI,oBAAID,UAAWC,IAAQK,KAAvB,SAA8BP,EAAMO,OACpC,8BAAIP,EAAME,QAAV,OACA,mBAAGD,UAAWC,IAAQM,KAAtB,SAA6BR,EAAMQ,gBCfjDC,EACM,mGADNA,EAEI,YAFJA,EAGO,YAHPA,EAII,QAyBKC,MAtBf,WACI,OACI,gCACI,uBADJ,cAKI,cAAC,EAAD,CACIL,OAAQI,EACRF,KAAME,EACNP,QAASO,EACTD,KAAMC,IAGV,uBAGA,2B,uBCUGE,MAvBf,SAAgBX,GACZ,IACMY,EAAOC,IAAGC,MAAM,IAAID,IAAGb,EAAMe,OAAOC,UAC1C,OACQ,sBAAKf,UAAWY,IAAGI,OAAnB,UACQ,8BAAMjB,EAAMe,OAAOR,OACnB,sBAAKN,UAAWY,IAAGE,OAAnB,UACI,qBAAKd,UAAWW,EAAhB,SAAyBZ,EAAMe,OAAOC,WACtC,wBAAQE,QAAS,kBAAqBlB,EAAMmB,qBAAqBnB,EAAMe,OAAOK,MAA9E,sB,gBCsCTC,MA9Cf,SAAiBrB,GACb,MAAmBsB,mBAAS,OAA5B,mBAAOC,EAAP,KAAWC,EAAX,KACMC,EAAgBzB,EAAM0B,KAAKC,KAAI,SAACC,GAAD,OAC7B,cAAC,EAAD,CAEIb,OAAQa,EACRT,qBAAsBnB,EAAMmB,sBAFvBS,EAAER,QAsBfS,EAAIC,IAAGC,QAAQ,KAAW,QAANR,EAAYO,IAAGE,OAAO,IAC1CC,EAAIH,IAAGC,QAAQ,KAAW,SAANR,EAAaO,IAAGE,OAAO,IAC3CE,EAAIJ,IAAGC,QAAQ,KAAW,WAANR,EAAeO,IAAGE,OAAO,IAC7CG,EAAIL,IAAGC,QAAQ,KAAW,QAANR,EAAYO,IAAGE,OAAO,IAC9C,OACI,sBAAK/B,UAAW6B,IAAGM,UAAnB,UACI,qBAAKnC,UAAW6B,IAAGO,MAAnB,SACKZ,IAGL,sBAAKxB,UAAW6B,IAAGC,QAAnB,UACI,wBAAQ9B,UAAW4B,EAAKX,QA3BrB,WACXlB,EAAMsC,UAAU,OAChBd,EAAO,QAyBC,iBACA,wBAAQvB,UAAWgC,EAAKf,QAxBpB,WACZlB,EAAMsC,UAAU,QAChBd,EAAO,SAsBC,kBACA,wBAAQvB,UAAWiC,EAAKhB,QArBlB,WACdlB,EAAMsC,UAAU,UAChBd,EAAO,WAmBC,oBACA,wBAAQvB,UAAWkC,EAAKjB,QAlBrB,WACXlB,EAAMsC,UAAU,OAChBd,EAAO,QAgBC,wBCpCVe,EAA4B,CAC9B,CAACnB,IAAK,EAAGb,KAAM,QAASS,SAAU,QAClC,CAACI,IAAK,EAAGb,KAAM,QAASS,SAAU,OAClC,CAACI,IAAK,EAAGb,KAAM,QAASS,SAAU,OAClC,CAACI,IAAK,EAAGb,KAAM,OAAQS,SAAU,QACjC,CAACI,IAAK,EAAGb,KAAM,aAAcS,SAAU,WAkD5BwB,MA3Bf,WACI,MAA8BlB,mBAAqBiB,GAAnD,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAA4BpB,mBAAqB,OAAjD,mBAAOqB,EAAP,KAAeL,EAAf,KAEMM,EAvBmB,SAACH,EAAqBE,GAC/C,MAAe,QAAXA,EACOF,EAEI,QAAXE,EACOF,EAAQE,QAAO,SAAAf,GAAC,MAAmB,QAAfA,EAAEZ,YAElB,WAAX2B,EACOF,EAAQE,QAAO,SAAAf,GAAC,MAAmB,WAAfA,EAAEZ,YAEb,SAAX2B,EACEF,EAAQE,QAAO,SAAAf,GAAC,MAAmB,SAAfA,EAAEZ,iBAD5B,EAamB6B,CAAcJ,EAASE,GAG/C,OACI,gCACI,uBADJ,cAKI,cAAC,EAAD,CACIjB,KAAMkB,EACNN,UAAWA,EACXnB,qBAXiB,SAACC,GAAD,OAAiBsB,EATtB,SAACD,EAAqBrB,GAC9C,OAAOqB,EAAQE,QAAO,SAACG,GAAD,OAAOA,EAAE1B,MAAQA,KAQkB2B,CAAaN,EAASrB,OAcvE,uBAGA,2BChDG4B,MAff,WACI,OACI,sBAAK/C,UAAWgD,IAAED,IAAlB,UACI,mDACA,cAAC,EAAD,IACA,cAAC,EAAD,QCEQE,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZRC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SDiIpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHC,QAAQD,MAAMA,EAAMjE,c","file":"static/js/main.e44cba87.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"someClass\":\"Affairs_someClass__c2Tda\",\"tasks\":\"Affairs_tasks__2FM4L\",\"buttons\":\"Affairs_buttons__3uOBc\",\"active\":\"Affairs_active__1pSxY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Message_wrapper__YHYa7\",\"message\":\"Message_message__22Az5\",\"name\":\"Message_name__1ric4\",\"time\":\"Message_time__2qOCB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"global\":\"Affair_global__va7yY\",\"affair\":\"Affair_affair__38JBn\",\"low\":\"Affair_low__cMIDh\",\"high\":\"Affair_high__1N7xe\",\"middle\":\"Affair_middle__uKts0\",\"level\":\"Affair_level__2LXl-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__x9fZn\"};","import React from 'react'\nimport message from './Message.module.css'\n\ntype MessageType={\n    avatar:string\n    name:string\n    message:string\n    time:string\n}\n\nfunction Message(props:MessageType) {\n    return (\n        <div>\n            <div className={message.wrapper}>\n                <img src={props.avatar} alt=\"\"/>\n                <div className={message.message}>\n                    <h5 className={message.name}>{props.name}</h5>\n                    <p>{props.message} </p>\n                    <p className={message.time}>{props.time}</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Message\n","import React from 'react'\nimport Message from \"./Message\";\n\nconst messageData = {\n    avatar: 'https://s2.cdn.teleprogramma.pro/wp-content/uploads/2019/05/cb706541804dc13167fa181910dc3387.jpg',\n    name: 'Some Name',\n    message: 'some text',\n    time: '22:00',\n}\n\nfunction HW1() {\n    return (\n        <div>\n            <hr/>\n            homeworks 1\n\n            {/*should work (должно работать)*/}\n            <Message\n                avatar={messageData.avatar}\n                name={messageData.name}\n                message={messageData.message}\n                time={messageData.time}\n            />\n\n            <hr/>\n            {/*для личного творчества, могу проверить*/}\n            {/*<AlternativeMessage/>*/}\n            <hr/>\n        </div>\n    )\n}\n\nexport default HW1\n","import React from 'react'\nimport af from './Affair.module.css'\n\ntype InAffairType = {_id: number,name: string,priority: string }\ntype AffairPropsType = {\n    // key не нужно типизировать\n    affair: InAffairType // need to fix any\n    deleteAffairCallback: (_id: number) => void // need to fix any\n}\n\ntype callBack={\n    callBack:(id:number)=>void\n}\n\nfunction Affair(props: AffairPropsType) {\n    const deleteCallback = (callBack: callBack) => callBack\n    const colors=af.level+' '+af[props.affair.priority]\n    return (\n            <div className={af.global}>\n                    <div>{props.affair.name}</div>\n                    <div className={af.affair}>\n                        <div className={colors}>{props.affair.priority}</div>\n                        <button onClick={() => deleteCallback(props.deleteAffairCallback(props.affair._id))}>X</button>\n                    </div>\n            </div>\n        )\n    // need to fix\n    // return (\n    //     // <div className={af.global}>\n    //     //     <div className={af.affair}>\n    //     //         {someText}\n    //     //     </div>\n    //     //\n    //     // </div>\n    // )\n}\n\nexport default Affair\n","import React, {useState} from 'react'\nimport Affair from './Affair'\nimport {AffairType, FilterType} from './HW2'\nimport fs from './Affairs.module.css'\ntype InAffairType = {_id: number,name: string,priority: string }\n\n\ntype AffairsPropsType = { // need to fix any\n    data: AffairType\n    setFilter: (f: FilterType) => void\n    deleteAffairCallback: (_id: number) => void\n}\n\n\nfunction Affairs(props: AffairsPropsType) {\n    const [cls,setCls]=useState('all');\n    const mappedAffairs = props.data.map((a: InAffairType) => (\n            <Affair // should work\n                key={a._id} // кеи ОБЯЗАТЕЛЬНЫ в 99% - так что лучше их писать всегда при создании компонент в мапе\n                affair={a}\n                deleteAffairCallback={props.deleteAffairCallback}\n            />\n    ))\n\n    const setAll = () => {\n        props.setFilter(\"all\")\n        setCls('all')\n    } // need to fix\n    const setHigh = () => {\n        props.setFilter('high')\n        setCls('high')\n    }\n    const setMiddle = () => {\n        props.setFilter('middle')\n        setCls('middle')\n    }\n    const setLow = () => {\n        props.setFilter('low')\n        setCls('low')\n    }\n    let st1=fs.buttons+' '+(cls==='all'?fs.active:'')\n    let st2=fs.buttons+' '+(cls==='high'?fs.active:'')\n    let st3=fs.buttons+' '+(cls==='middle'?fs.active:'')\n    let st4=fs.buttons+' '+(cls==='low'?fs.active:'')\n    return (\n        <div className={fs.someClass}>\n            <div className={fs.tasks}>\n                {mappedAffairs}\n            </div>\n\n            <div className={fs.buttons}>\n                <button className={st1} onClick={setAll}>All</button>\n                <button className={st2} onClick={setHigh}>High</button>\n                <button className={st3} onClick={setMiddle}>Middle</button>\n                <button className={st4} onClick={setLow}>Low</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Affairs\n","import React, {useState} from 'react'\n\nimport Affairs from \"./Affairs\";\n\n\n// types\n\nexport type AffairPriorityType ='low' | 'middle' | 'high' // need to fix any\ntype InArray={\n    _id:number\n    name:string\n    priority:AffairPriorityType\n}\nexport type AffairType = Array<InArray>\n // need to fix any\nexport type FilterType = \"all\"|AffairPriorityType\n\n// constants\nconst defaultAffairs:AffairType = [ // need to fix any\n    {_id: 1, name: 'React', priority: 'high'},\n    {_id: 2, name: 'anime', priority: 'low'},\n    {_id: 3, name: 'games', priority: 'low'},\n    {_id: 4, name: 'work', priority: 'high'},\n    {_id: 5, name: 'html & css', priority: 'middle'},\n]\n\n// pure helper functions\nexport const filterAffairs = (affairs: AffairType, filter: FilterType): AffairType<InArray> => { // need to fix any\n    if (filter === 'all') {\n        return affairs\n    }\n    if (filter === 'low') {\n        return affairs.filter(a => a.priority === 'low')\n    }\n    if (filter === 'middle') {\n        return affairs.filter(a => a.priority === 'middle')\n    }\n    else if (filter === 'high') {\n        return affairs.filter(a => a.priority === 'high')\n    }\n\n}\nexport const deleteAffair = (affairs: AffairType, _id: number) => { // need to fix any\n    return affairs.filter((d) => d._id !== _id)\n}\n\nfunction HW2() {\n    const [affairs, setAffairs] = useState<AffairType>(defaultAffairs) // need to fix any\n    const [filter, setFilter] = useState<FilterType>('all')\n\n    const filteredAffairs = filterAffairs(affairs, filter)\n    const deleteAffairCallback = (_id: number) => setAffairs(deleteAffair(affairs, _id)) // need to fix any\n\n    return (\n        <div>\n            <hr/>\n            homeworks 2\n\n            {/*should work (должно работать)*/}\n            <Affairs\n                data={filteredAffairs}\n                setFilter={setFilter}\n                deleteAffairCallback={deleteAffairCallback}\n            />\n\n            <hr/>\n            {/*для личного творчества, могу проверить*/}\n            {/*<AlternativeAffairs/>*/}\n            <hr/>\n        </div>\n    )\n}\n\nexport default HW2\n","import React from 'react'\nimport s from './App.module.css'\nimport HW1 from '../../../p2-homeworks/h1/HW1'\nimport HW2 from \"../../../p2-homeworks/h2/HW2\";\n\nfunction App() {\n    return (\n        <div className={s.App}>\n            <div>react homeworks:</div>\n            <HW1/>\n            <HW2/>\n            {/*<HW2/>*/}\n            {/*<HW3/>*/}\n            {/*<HW4/>*/}\n            {/*<HW5/>*/}\n\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        )\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'}\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister()\n            })\n            .catch(error => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './p1-main/m1-ui/u1-app/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}